import inhul.managers.filesystem.events.FileEvent;import pirrest.events.Event;import pirrest.events.EventDispatcher;import pirrest.events.IEventDispatcher;import pirrest.utils.Delegate;/** * @author sas * @description * @version 1.0 */class inhul.managers.filesystem.FLFile implements IEventDispatcher{	public static var $version:Number = 1.0;	public static var $className:String = "inhul.managers.filesystem.FLFile";	public static var TYPE_XML:String = "xml";	public static var TYPE_SWF:String = "swf";	public static var TYPE_FLV:String = "flv";	public static var TYPE_MP3:String = "mp3";	public static var TYPE_TXT:String = "txt";	public static var STATUS_READY:String = "ready";	public static var STATUS_LOAD:String = "load";	public static var STATUS_COMPLETE:String = "complete";	private static var count:Number = 0;	public var scope:Object;	public var field:String;	public var type:String;	public var cache:Boolean;	public var data:Object;	public var target:Object;	public var status:String;	public var isLoaded:Boolean;	private var intervalProgress:Number;	private var useTimestam:Boolean;	private var swfData:Object;	private var mp3Data:Object;	private var _uri:String;	private var _id:Object;	function FLFile(scope:Object, field:String, uri:String, type:String, cache:Boolean, data:Object) {		super();		EventDispatcher.initialize(this);		this.scope = scope;		this.field = field;		this.uri = uri;		this.type = type;		this.cache = cache;		this.data = data;		this.isLoaded = false;		this.useTimestam = false;		this.id = count++;	}	//-----------------------------Main methods--------------------------------	public function load():Void {		trace("DVK> FLFile :: load ("+arguments+")"+"file: "+this);		if(this.status == STATUS_LOAD){			return;		}		if(this.isLoaded && this.cache){			this.dispatchEvent(new FileEvent(FileEvent.COMPLETE, this));			return;		}else if(this.isLoaded){			this.useTimestam = true;		}		this.status = STATUS_LOAD;		switch(this.type){			case TYPE_XML :				this.loadXML();			break;			case TYPE_SWF :				this.loadSWF();			break;			case TYPE_FLV :			break;			case TYPE_MP3 :			break;			case TYPE_TXT :			break;			default :				this.dispatchEvent(new FileEvent(FileEvent.ERROR, this, {type:"File.Error.Type", code:"", number:"003"}));			break;		}		this.intervalProgress = setInterval(this, "onProgress", 100);	}	public function close():Void {		trace("DVK> FLFile :: close ("+arguments+")"+"file: "+this);		if(this.status != STATUS_LOAD){			return;		}		this.status = STATUS_READY;		switch(this.type){			case TYPE_XML :			break;			case TYPE_SWF :				this.swfData.loader.unloadClip();			break;			case TYPE_FLV :			break;			case TYPE_MP3 :			break;			case TYPE_TXT :			break;			default :				this.dispatchEvent(new FileEvent(FileEvent.ERROR, this, {type:"File.Error.Type", code:"", number:"003"}));			break;		}		clearInterval(this.intervalProgress);	}	private function loadSWF():Void {		trace("DVK> FLFile :: loadSWF ("+arguments+")");		if(!Boolean(this.scope[this.field])){			if(!(this.scope instanceof MovieClip)){				this.dispatchEvent(new FileEvent(FileEvent.ERROR, this, {type:"File.System.ScopNotMovie", code:"", number:"001"}));			}			this.target = this.scope.createEmptyMovieClip(this.field, this.scope.getNextHighestDepth());		}else{			this.target = this.scope[this.field];		}		this.swfData = {};		swfData.listener = {};		swfData.listener.onLoadStart = Delegate.create(this, function(target:MovieClip){			this.dispatchEvent(new FileEvent(FileEvent.LOAD_START, this));		});		swfData.listener.onLoadInit = Delegate.create(this, function(target:MovieClip){			this.onSWFLoad(true);		});		swfData.listener.onLoadError = Delegate.create(this, function(target:MovieClip, errorCode:String, httpStatus:Number){			this.onSWFLoad(false);		});		swfData.loader = new MovieClipLoader();		swfData.loader.addListener(swfData.listener);		swfData.loader.loadClip(this.uri, this.target);	}	private function loadXML():Void {		trace("DVK> FLFile :: loadXML ("+arguments+")");		if(!Boolean(this.scope[this.field])){			this.target = this.scope[this.field] = new XML();			this.target.ignoreWhite = true;		}else{			this.target = this.scope[this.field];		}		this.target.onLoad = Delegate.create(this, function(success){			this.onXMLLoad(success);		});		if(Boolean(this.data)){			this.data.sendAndLoad(this.uri, this.target, this.data.method);		}else{			this.target.load(this.uri);		}	}	private function loadMP3():Void {		trace("DVK> FLFile :: loadMP3 ("+arguments+")");		if(!Boolean(this.scope[this.field])){			this.target = new Sound();		}else{			this.target = this.scope[this.field];		}		this.target.onLoad = Delegate.create(this, function(success){			this.onMP3Load(success);		});		this.target.loadSound(this.uri, false);	}	private function onSWFLoad(success):Void {		trace("DVK> FLFile :: onSWFLoad ("+arguments+")"+"file: "+this);		this.status = STATUS_COMPLETE;		if(success){			this.dispatchEvent(new FileEvent(FileEvent.LOAD_COMPLETE, this));		}else{			this.dispatchEvent(new FileEvent(FileEvent.LOAD_ERROR, this, {type:"File.Error.Load", code:"", number:"002"}));		}		clearInterval(this.intervalProgress);	}	private function onXMLLoad(success):Void {		trace("DVK> FLFile :: onXMLLoad ("+arguments+")"+"file: "+this);		this.status = STATUS_COMPLETE;		if(success){			this.dispatchEvent(new FileEvent(FileEvent.LOAD_COMPLETE, this));		}else{			this.dispatchEvent(new FileEvent(FileEvent.LOAD_ERROR, this));		}		clearInterval(this.intervalProgress);	}	private function onMP3Load(success):Void {		trace("DVK> FLFile :: onMP3Load ("+arguments+")"+"file: "+this);		this.status = STATUS_COMPLETE;		if(success){			this.dispatchEvent(new FileEvent(FileEvent.LOAD_COMPLETE, this));		}else{			this.dispatchEvent(new FileEvent(FileEvent.LOAD_ERROR, this));		}		clearInterval(this.intervalProgress);	}	private function onProgress():Void {		trace("DVK> FLFile :: onProgress ("+arguments+")"+"file: "+this);		this.dispatchEvent(new FileEvent(FileEvent.LOAD_PROGRESS, this, {bytesLoaded:this.target.getBytesLoaded(), bytesTotal:this.target.getBytesTotal()}));	}	public function get percent():Number {		return Math.round(100*this.target.getBytesLoaded()/this.target.getBytesTotal());	}	public function set uri($uri:String):Void {		_uri = $uri;	}	public function get uri():String {		return this.useTimestam ? _uri + (new Date()).getTime() : _uri;	}	public function set id($id:Object):Void {		_id = $id;	}	public function get id():Object {		return _id;	}	public function toString():String {		return "[object FLFile]{"+this.id+"|"+this.scope+"|"+this.field+"|"+this.uri+"}";	}	//-----------------------------Main methods--------------------------------	//-----------------------------Handlers------------------------------------	//-----------------------------Handlers------------------------------------	//-----------------------------User interaction----------------------------	//-----------------------------User interaction----------------------------	//-----------------------------Event dispatcher----------------------------	public function addEventListener($type:String, $handler:Function):Boolean {return null;}	public function removeEventListener($type:String, $handler:Function):Boolean {return null;}	public function dispatchEvent($event:Event):Void {}	//-----------------------------Event dispatcher----------------------------}